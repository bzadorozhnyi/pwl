"""create all tables

Revision ID: 06d1868b0774
Revises:
Create Date: 2025-09-10 17:39:09.298426

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "06d1868b0774"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "family",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_family")),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("username", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("password", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("first_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("last_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user")),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_index(op.f("ix_user_username"), "user", ["username"], unique=True)
    op.create_table(
        "familymember",
        sa.Column("family_id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column(
            "role", sa.Enum("ADMIN", "MEMBER", name="familyrole"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["family_id"], ["family.id"], name=op.f("fk_familymember_family_id_family")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name=op.f("fk_familymember_user_id_user")
        ),
        sa.PrimaryKeyConstraint("family_id", "user_id", name=op.f("pk_familymember")),
    )
    op.create_table(
        "familytask",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("family_id", sa.Uuid(), nullable=False),
        sa.Column("creator_id", sa.Uuid(), nullable=False),
        sa.Column("assignee_id", sa.Uuid(), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("done", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["assignee_id"], ["user.id"], name=op.f("fk_familytask_assignee_id_user")
        ),
        sa.ForeignKeyConstraint(
            ["creator_id"], ["user.id"], name=op.f("fk_familytask_creator_id_user")
        ),
        sa.ForeignKeyConstraint(
            ["family_id"], ["family.id"], name=op.f("fk_familytask_family_id_family")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_familytask")),
    )
    op.create_table(
        "shoppinglist",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("creator_id", sa.Uuid(), nullable=False),
        sa.Column("family_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["creator_id"], ["user.id"], name=op.f("fk_shoppinglist_creator_id_user")
        ),
        sa.ForeignKeyConstraint(
            ["family_id"], ["family.id"], name=op.f("fk_shoppinglist_family_id_family")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_shoppinglist")),
    )
    op.create_table(
        "verifytoken",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("token", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name=op.f("fk_verifytoken_user_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_verifytoken")),
        sa.UniqueConstraint("token", name=op.f("uq_verifytoken_token")),
    )
    op.create_index(
        op.f("ix_verifytoken_email"), "verifytoken", ["email"], unique=False
    )
    op.create_table(
        "shoppinglistitem",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("shopping_list_id", sa.Uuid(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("purchased", sa.Boolean(), nullable=False),
        sa.Column("creator_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["creator_id"],
            ["user.id"],
            name=op.f("fk_shoppinglistitem_creator_id_user"),
        ),
        sa.ForeignKeyConstraint(
            ["shopping_list_id"],
            ["shoppinglist.id"],
            name=op.f("fk_shoppinglistitem_shopping_list_id_shoppinglist"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_shoppinglistitem")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("shoppinglistitem")
    op.drop_index(op.f("ix_verifytoken_email"), table_name="verifytoken")
    op.drop_table("verifytoken")
    op.drop_table("shoppinglist")
    op.drop_table("familytask")
    op.drop_table("familymember")
    op.drop_index(op.f("ix_user_username"), table_name="user")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_table("family")
    op.execute("DROP TYPE IF EXISTS familyrole CASCADE")
    # ### end Alembic commands ###
